name: WordPress Selective Releases

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - run: sudo apt-get update && sudo apt-get install -y jq zip unzip curl

      # --- Get All Versions ---
      - id: get
        env:
          BRICKS_LICENSE_KEY: ${{ secrets.BRICKS_LICENSE_KEY }}
        run: |
          set -euo pipefail

          # WordPress
          WP_VERSION=$(curl -s https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].current')

          # Bricks
          BRICKS_AVAILABLE=false
          BRICKS_HASH="unavailable"
          if [ -n "${BRICKS_LICENSE_KEY:-}" ]; then
            if BRICKS_HEADERS=$(curl -s -I "https://my.bricksbuilder.io/api/commerce/download/get_theme?license_key=$BRICKS_LICENSE_KEY"); then
              LEN=$(echo "$BRICKS_HEADERS" | awk 'tolower($0) ~ /^content-length:/ {print $2}' | tr -d '\r\n' || echo "0")
              MOD=$(echo "$BRICKS_HEADERS" | awk 'tolower($0) ~ /^last-modified:/ {$1=""; sub(/^ /,""); print; exit}' | tr -d '\r\n' || echo "unknown")
              BRICKS_HASH=$(echo "${LEN}-${MOD}" | sha256sum | awk '{print $1}')
              BRICKS_AVAILABLE=true
            fi
          fi

          # Core Framework
          CORE_VERSION=$(curl -s "https://api.wordpress.org/plugins/info/1.0/core-framework.json" | jq -r '.version // "latest"')

          # Hello Elementor
          HELLO_VERSION=$(curl -s "https://api.wordpress.org/themes/info/1.0/hello-elementor.json" | jq -r '.version // "latest"')

          # Elementor
          ELEMENTOR_VERSION=$(curl -s "https://api.wordpress.org/plugins/info/1.0/elementor.json" | jq -r '.version // "latest"')

          # Dixy Child
          if DIXY_API=$(curl -s "https://api.github.com/repos/DinuraSellapperuma/dixy-child/commits/main") && echo "$DIXY_API" | jq . >/dev/null 2>&1; then
            DIXY_VERSION=$(echo "$DIXY_API" | jq -r '.sha' | cut -c1-8)
          else
            DIXY_VERSION=$(date +%Y%m%d)
          fi

          # Build safe JSON
          jq -n \
            --arg wp "$WP_VERSION" \
            --arg bricks "$BRICKS_HASH" \
            --argjson bricks_available $([ "$BRICKS_AVAILABLE" = true ] && echo true || echo false) \
            --arg core "$CORE_VERSION" \
            --arg hello "$HELLO_VERSION" \
            --arg elementor "$ELEMENTOR_VERSION" \
            --arg dixy "$DIXY_VERSION" \
            '{wordpress:$wp, bricks:$bricks, bricks_available:$bricks_available, core_framework:$core, hello_elementor:$hello, elementor:$elementor, dixy_child:$dixy}' \
            > /tmp/current.json

          {
            echo 'versions<<JSON'
            cat /tmp/current.json
            echo 'JSON'
          } >> "$GITHUB_OUTPUT"

      # --- Compare to previous versions ---
      - id: diff
        run: |
          set -euo pipefail
          echo '{}' > /tmp/prev.json
          [ -f versions.json ] && cp versions.json /tmp/prev.json

          changed() { jq -r "(.${1} != (input|.${1}))" /tmp/current.json /tmp/prev.json; }

          echo "wp=$(changed wordpress)" >> $GITHUB_OUTPUT
          echo "bricks=$(changed bricks)" >> $GITHUB_OUTPUT
          echo "core=$(changed core_framework)" >> $GITHUB_OUTPUT
          echo "hello=$(changed hello_elementor)" >> $GITHUB_OUTPUT
          echo "elementor=$(changed elementor)" >> $GITHUB_OUTPUT
          echo "dixy=$(changed dixy_child)" >> $GITHUB_OUTPUT

      # --- Download and prepare clean base if WP changed ---
      - if: steps.diff.outputs.wp == 'true'
        run: |
          WP_VERSION=$(jq -r '.wordpress' /tmp/current.json)
          curl -L -O "https://wordpress.org/wordpress-$WP_VERSION.zip"
          unzip -q "wordpress-$WP_VERSION.zip"
          rm -f "wordpress-$WP_VERSION.zip"
          cd wordpress
          rm -f license.txt readme.html xmlrpc.php
          rm -rf wp-content/themes/twenty* wp-content/plugins/akismet
          rm -f wp-content/plugins/hello.php
          cd ..
          rm -rf cleaned && mv wordpress cleaned

      # --- Prepare release folders ---
      - run: |
          WP_VERSION=$(jq -r '.wordpress' /tmp/current.json)
          mkdir -p releases
          if [ "${{ steps.diff.outputs.wp }}" = "true" ]; then
            rm -rf releases/wordpress-clean-$WP_VERSION
            cp -r cleaned releases/wordpress-clean-$WP_VERSION
            rm -rf releases/wordpress-bricks-$WP_VERSION
            cp -r cleaned releases/wordpress-bricks-$WP_VERSION
            rm -rf releases/wordpress-elementor-$WP_VERSION
            cp -r cleaned releases/wordpress-elementor-$WP_VERSION
          fi

      # --- Update Bricks Package ---
      - if: steps.diff.outputs.wp == 'true' || steps.diff.outputs.bricks == 'true' || steps.diff.outputs.core == 'true' || steps.diff.outputs.dixy == 'true'
        env:
          BRICKS_LICENSE_KEY: ${{ secrets.BRICKS_LICENSE_KEY }}
        run: |
          WP_VERSION=$(jq -r '.wordpress' /tmp/current.json)
          cd releases/wordpress-bricks-$WP_VERSION

          # Dixy child
          rm -rf wp-content/themes/dixy-child
          curl -L -o /tmp/dixy.zip https://github.com/DinuraSellapperuma/dixy-child/archive/refs/heads/main.zip
          unzip -o -q /tmp/dixy.zip
          mv dixy-child-main wp-content/themes/dixy-child
          rm -f /tmp/dixy.zip

          # Bricks
          if [ "$(jq -r '.bricks_available' /tmp/current.json)" = "true" ]; then
            rm -rf wp-content/themes/bricks
            BRICKS_URL="https://my.bricksbuilder.io/api/commerce/download/get_theme?license_key=$BRICKS_LICENSE_KEY"
            curl -L -o /tmp/bricks.zip "$BRICKS_URL" || curl -L -o /tmp/bricks.zip "$BRICKS_URL&version=2.0.1"
            unzip -o -q /tmp/bricks.zip -d wp-content/themes/
            rm -f /tmp/bricks.zip
          fi

          # Core Framework
          rm -rf wp-content/plugins/core-framework
          CORE_VERSION=$(jq -r '.core_framework' /tmp/current.json)
          if [ "$CORE_VERSION" = "latest" ]; then
            curl -L -o /tmp/core.zip "https://downloads.wordpress.org/plugin/core-framework.zip"
          else
            curl -L -o /tmp/core.zip "https://downloads.wordpress.org/plugin/core-framework.$CORE_VERSION.zip"
          fi
          unzip -o -q /tmp/core.zip -d wp-content/plugins/
          rm -f /tmp/core.zip

      # --- Update Elementor Package ---
      - if: steps.diff.outputs.wp == 'true' || steps.diff.outputs.hello == 'true' || steps.diff.outputs.elementor == 'true'
        run: |
          WP_VERSION=$(jq -r '.wordpress' /tmp/current.json)
          cd releases/wordpress-elementor-$WP_VERSION

          # Hello
          rm -rf wp-content/themes/hello-elementor
          HELLO_VERSION=$(jq -r '.hello_elementor' /tmp/current.json)
          if [ "$HELLO_VERSION" = "latest" ]; then
            curl -L -o /tmp/hello.zip "https://downloads.wordpress.org/theme/hello-elementor.zip"
          else
            curl -L -o /tmp/hello.zip "https://downloads.wordpress.org/theme/hello-elementor.$HELLO_VERSION.zip"
          fi
          unzip -o -q /tmp/hello.zip -d wp-content/themes/
          rm -f /tmp/hello.zip

          # Elementor
          rm -rf wp-content/plugins/elementor
          ELEMENTOR_VERSION=$(jq -r '.elementor' /tmp/current.json)
          if [ "$ELEMENTOR_VERSION" = "latest" ]; then
            curl -L -o /tmp/elementor.zip "https://downloads.wordpress.org/plugin/elementor.zip"
          else
            curl -L -o /tmp/elementor.zip "https://downloads.wordpress.org/plugin/elementor.$ELEMENTOR_VERSION.zip"
          fi
          unzip -o -q /tmp/elementor.zip -d wp-content/plugins/
          rm -f /tmp/elementor.zip

      # --- Zip Updated Packages ---
      - run: |
          WP_VERSION=$(jq -r '.wordpress' /tmp/current.json)
          cd releases
          [ "${{ steps.diff.outputs.wp }}" = "true" ] && zip -r "wordpress-clean-$WP_VERSION.zip" "wordpress-clean-$WP_VERSION" >/dev/null
          ([ "${{ steps.diff.outputs.wp }}" = "true" ] || [ "${{ steps.diff.outputs.bricks }}" = "true" ] || [ "${{ steps.diff.outputs.core }}" = "true" ] || [ "${{ steps.diff.outputs.dixy }}" = "true" ]) && zip -r "wordpress-bricks-$WP_VERSION.zip" "wordpress-bricks-$WP_VERSION" >/dev/null
          ([ "${{ steps.diff.outputs.wp }}" = "true" ] || [ "${{ steps.diff.outputs.hello }}" = "true" ] || [ "${{ steps.diff.outputs.elementor }}" = "true" ]) && zip -r "wordpress-elementor-$WP_VERSION.zip" "wordpress-elementor-$WP_VERSION" >/dev/null
          cd ..

      # --- Save versions.json and commit ---
      - run: cp /tmp/current.json versions.json

      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add versions.json releases
          if git diff --staged --quiet; then
            echo "No changes"
          else
            git commit -m "Update releases $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            git push
          fi
