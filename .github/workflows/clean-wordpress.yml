name: Clean WordPress Latest

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  clean-wordpress:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure tools present
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip unzip

      - name: Get All Component Versions
        id: get_all_versions
        env:
          BRICKS_LICENSE_KEY: ${{ secrets.BRICKS_LICENSE_KEY }}
        run: |
          set -euo pipefail

          echo "=== Checking WordPress Version ==="
          curl -s https://api.wordpress.org/core/version-check/1.7/ > version.json
          WP_VERSION=$(jq -r '.offers[0].current' version.json)
          echo "wordpress_version=$WP_VERSION" >> $GITHUB_OUTPUT
          echo "WordPress version: $WP_VERSION"

          echo "=== Checking Bricks Builder Version ==="
          if [ -n "${BRICKS_LICENSE_KEY:-}" ]; then
            if BRICKS_HEADERS=$(curl -s -I "https://my.bricksbuilder.io/api/commerce/download/get_theme?license_key=$BRICKS_LICENSE_KEY" 2>/dev/null); then
              CONTENT_LENGTH=$(echo "$BRICKS_HEADERS" | awk 'tolower($0) ~ /^content-length:/ {print $2}' | tr -d '\r\n' || true)
              LAST_MODIFIED=$(echo "$BRICKS_HEADERS" | awk 'tolower($0) ~ /^last-modified:/ {$1=""; sub(/^ /,""); print; exit}' | tr -d '\r\n' || true)
              BRICKS_HASH=$(echo "${CONTENT_LENGTH:-unknown}-${LAST_MODIFIED:-unknown}" | sha256sum | awk '{print $1}')
              echo "bricks_version=$BRICKS_HASH" >> $GITHUB_OUTPUT
              echo "bricks_available=true" >> $GITHUB_OUTPUT
              echo "Bricks Builder SHA-256: $BRICKS_HASH"
            else
              echo "bricks_available=false" >> $GITHUB_OUTPUT
              echo "Bricks Builder API not accessible"
            fi
          else
            echo "bricks_available=false" >> $GITHUB_OUTPUT
            echo "No Bricks license key provided"
          fi

          echo "=== Checking Hello Elementor Theme ==="
          if HELLO_API=$(curl -s "https://api.wordpress.org/themes/info/1.0/hello-elementor.json" 2>/dev/null) && echo "$HELLO_API" | jq . >/dev/null 2>&1; then
            HELLO_VERSION=$(echo "$HELLO_API" | jq -r '.version')
            echo "hello_elementor_version=$HELLO_VERSION" >> $GITHUB_OUTPUT
            echo "Hello Elementor theme: $HELLO_VERSION"
          else
            echo "hello_elementor_version=latest" >> $GITHUB_OUTPUT
            echo "Hello Elementor: API failed, using latest"
          fi

          echo "=== Checking Elementor Plugin ==="
          if ELEMENTOR_API=$(curl -s "https://api.wordpress.org/plugins/info/1.0/elementor.json" 2>/dev/null) && echo "$ELEMENTOR_API" | jq . >/dev/null 2>&1; then
            ELEMENTOR_VERSION=$(echo "$ELEMENTOR_API" | jq -r '.version')
            echo "elementor_plugin_version=$ELEMENTOR_VERSION" >> $GITHUB_OUTPUT
            echo "Elementor plugin: $ELEMENTOR_VERSION"
          else
            echo "elementor_plugin_version=latest" >> $GITHUB_OUTPUT
            echo "Elementor plugin: API failed, using latest"
          fi

          echo "=== Checking Core Framework Plugin ==="
          if CORE_API=$(curl -s "https://api.wordpress.org/plugins/info/1.0/core-framework.json" 2>/dev/null) && echo "$CORE_API" | jq . >/dev/null 2>&1; then
            CORE_VERSION=$(echo "$CORE_API" | jq -r '.version')
            echo "core_framework_version=$CORE_VERSION" >> $GITHUB_OUTPUT
            echo "Core Framework plugin: $CORE_VERSION"
          else
            echo "core_framework_version=latest" >> $GITHUB_OUTPUT
            echo "Core Framework plugin: API failed, using latest"
          fi

          echo "=== Checking Dixy Child Theme ==="
          if DIXY_API=$(curl -s "https://api.github.com/repos/DinuraSellapperuma/dixy-child/commits/main" 2>/dev/null) && echo "$DIXY_API" | jq . >/dev/null 2>&1; then
            DIXY_VERSION=$(echo "$DIXY_API" | jq -r '.sha' | cut -c1-8)
            echo "dixy_child_version=$DIXY_VERSION" >> $GITHUB_OUTPUT
            echo "Dixy Child Theme: $DIXY_VERSION"
          else
            DIXY_VERSION=$(date +%Y%m%d)
            echo "dixy_child_version=$DIXY_VERSION" >> $GITHUB_OUTPUT
            echo "Dixy Child Theme: API failed, using date $DIXY_VERSION"
          fi

      - name: Check for Existing Versions
        id: check_existing
        run: |
          set -euo pipefail
          WP_VERSIO_
